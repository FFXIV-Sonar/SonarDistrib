// <auto-generated> (or is this a modified copy and paste from https://source.dot.net/#System.Management/System.SR.cs,784d23eff7338b42?)
#nullable enable
using System.Reflection;

namespace FxResources.System.Management
{
    internal static class SR { }
}
namespace System.Management
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Management.SR)));

        private static readonly bool s_usingResourceKeys = AppContext.TryGetSwitch("System.Resources.UseSystemResourceKeys", out bool usingResourceKeys) ? usingResourceKeys : false;

        // This method is used to decide if we need to append the exception message parameters to the message when calling SR.Format.
        // by default it returns the value of System.Resources.UseSystemResourceKeys AppContext switch or false if not specified.
        // Native code generators can replace the value this returns based on user input at the time of native code generation.
        // The Linker is also capable of replacing the value of this method when the application is being trimmed.
        private static bool UsingResourceKeys() => s_usingResourceKeys;

        internal static string GetResourceString(string resourceKey)
        {
            if (UsingResourceKeys())
            {
                return resourceKey;
            }

            string? resourceString = null;
            try
            {
                resourceString =
#if SYSTEM_PRIVATE_CORELIB || CORERT
                    InternalGetResourceString(resourceKey);
#else
                    ResourceManager.GetString(resourceKey);
#endif
            }
            catch { /* Swallow */ }

            return resourceString!; // only null if missing resources
        }

        internal static string GetResourceString(string resourceKey, string defaultString)
        {
            string resourceString = GetResourceString(resourceKey);

            return resourceKey == resourceString || resourceString == null ? defaultString : resourceString;
        }

        internal static string Format(string resourceFormat, object? p1)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1);
            }

            return string.Format(resourceFormat, p1);
        }

        internal static string Format(string resourceFormat, object? p1, object? p2)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2);
            }

            return string.Format(resourceFormat, p1, p2);
        }

        internal static string Format(string resourceFormat, object? p1, object? p2, object? p3)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2, p3);
            }

            return string.Format(resourceFormat, p1, p2, p3);
        }

        internal static string Format(string resourceFormat, params object?[]? args)
        {
            if (args != null)
            {
                if (UsingResourceKeys())
                {
                    return resourceFormat + ", " + string.Join(", ", args);
                }

                return string.Format(resourceFormat, args);
            }

            return resourceFormat;
        }

        internal static string Format(IFormatProvider? provider, string resourceFormat, object? p1)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1);
            }

            return string.Format(provider, resourceFormat, p1);
        }

        internal static string Format(IFormatProvider? provider, string resourceFormat, object? p1, object? p2)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2);
            }

            return string.Format(provider, resourceFormat, p1, p2);
        }

        internal static string Format(IFormatProvider? provider, string resourceFormat, object? p1, object? p2, object? p3)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2, p3);
            }

            return string.Format(provider, resourceFormat, p1, p2, p3);
        }

        internal static string Format(IFormatProvider? provider, string resourceFormat, params object?[]? args)
        {
            if (args != null)
            {
                if (UsingResourceKeys())
                {
                    return resourceFormat + ", " + string.Join(", ", args);
                }

                return string.Format(provider, resourceFormat, args);
            }

            return resourceFormat;
        }
        /// <summary>The Query string supplied was invalid or improperly formed</summary>
        internal static string @InvalidQuery => GetResourceString("InvalidQuery", @"The Query string supplied was invalid or improperly formed");
        /// <summary>The Query string supplied was invalid because it contains a duplicate token</summary>
        internal static string @InvalidQueryDuplicatedToken => GetResourceString("InvalidQueryDuplicatedToken", @"The Query string supplied was invalid because it contains a duplicate token");
        /// <summary>The Query string supplied was invalid because a supplied token was null</summary>
        internal static string @InvalidQueryNullToken => GetResourceString("InvalidQueryNullToken", @"The Query string supplied was invalid because a supplied token was null");
        /// <summary>Unable to wakeup the worker thread to create an object in MTA</summary>
        internal static string @WorkerThreadWakeupFailed => GetResourceString("WorkerThreadWakeupFailed", @"Unable to wakeup the worker thread to create an object in MTA");
        /// <summary>ClassName not initialized.</summary>
        internal static string @ClassNameNotInitializedException => GetResourceString("ClassNameNotInitializedException", @"ClassName not initialized.");
        /// <summary>Class name does not match.</summary>
        internal static string @ClassNameNotFoundException => GetResourceString("ClassNameNotFoundException", @"Class name does not match.");
        /// <summary>Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.</summary>
        internal static string @CommentAttributeProperty => GetResourceString("CommentAttributeProperty", @"Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.");
        /// <summary>Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).</summary>
        internal static string @CommentAutoCommitProperty => GetResourceString("CommentAutoCommitProperty", @"Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).");
        /// <summary>An Early Bound class generated for the WMI class.</summary>
        internal static string @CommentClassBegin => GetResourceString("CommentClassBegin", @"An Early Bound class generated for the WMI class.");
        /// <summary>Below are different overloads of constructors to initialize an instance of the class with a WMI object.</summary>
        internal static string @CommentConstructors => GetResourceString("CommentConstructors", @"Below are different overloads of constructors to initialize an instance of the class with a WMI object.");
        /// <summary>Private property to hold the name of WMI class which created this class.</summary>
        internal static string @CommentCreatedClass => GetResourceString("CommentCreatedClass", @"Private property to hold the name of WMI class which created this class.");
        /// <summary>Private property to hold the WMI namespace in which the class resides.</summary>
        internal static string @CommentCreatedWmiNamespace => GetResourceString("CommentCreatedWmiNamespace", @"Private property to hold the WMI namespace in which the class resides.");
        /// <summary>The current WMI object used</summary>
        internal static string @CommentCurrentObject => GetResourceString("CommentCurrentObject", @"The current WMI object used");
        /// <summary>Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.</summary>
        internal static string @CommentDateConversionFunction => GetResourceString("CommentDateConversionFunction", @"Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.");
        /// <summary>Private variable to hold the embedded property representing the instance.</summary>
        internal static string @CommentEmbeddedObject => GetResourceString("CommentEmbeddedObject", @"Private variable to hold the embedded property representing the instance.");
        /// <summary>Enumerator implementation for enumerating instances of the class.</summary>
        internal static string @CommentEnumeratorImplementation => GetResourceString("CommentEnumeratorImplementation", @"Enumerator implementation for enumerating instances of the class.");
        /// <summary>Flag to indicate if the instance is an embedded object.</summary>
        internal static string @CommentFlagForEmbedded => GetResourceString("CommentFlagForEmbedded", @"Flag to indicate if the instance is an embedded object.");
        /// <summary>Different overloads of GetInstances() help in enumerating instances of the WMI class.</summary>
        internal static string @CommentGetInstances => GetResourceString("CommentGetInstances", @"Different overloads of GetInstances() help in enumerating instances of the WMI class.");
        /// <summary>Functions Is&lt;PropertyName&gt;Null() are used to check if a property is NULL.</summary>
        internal static string @CommentIsPropNull => GetResourceString("CommentIsPropNull", @"Functions Is<PropertyName>Null() are used to check if a property is NULL.");
        /// <summary>Underlying lateBound WMI object.</summary>
        internal static string @CommentLateBoundObject => GetResourceString("CommentLateBoundObject", @"Underlying lateBound WMI object.");
        /// <summary>Property returning the underlying lateBound object.</summary>
        internal static string @CommentLateBoundProperty => GetResourceString("CommentLateBoundProperty", @"Property returning the underlying lateBound object.");
        /// <summary>The ManagementPath of the underlying WMI object.</summary>
        internal static string @CommentManagementPath => GetResourceString("CommentManagementPath", @"The ManagementPath of the underlying WMI object.");
        /// <summary>ManagementScope of the object.</summary>
        internal static string @CommentManagementScope => GetResourceString("CommentManagementScope", @"ManagementScope of the object.");
        /// <summary>Property returns the namespace of the WMI class.</summary>
        internal static string @CommentOriginNamespace => GetResourceString("CommentOriginNamespace", @"Property returns the namespace of the WMI class.");
        /// <summary>Member variable to store the 'automatic commit' behavior for the class.</summary>
        internal static string @CommentPrivateAutoCommit => GetResourceString("CommentPrivateAutoCommit", @"Member variable to store the 'automatic commit' behavior for the class.");
        /// <summary>TypeConverter to handle null values for ValueType properties</summary>
        internal static string @CommentPrototypeConverter => GetResourceString("CommentPrototypeConverter", @"TypeConverter to handle null values for ValueType properties");
        /// <summary>Functions Reset&lt;PropertyName&gt; are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.</summary>
        internal static string @CommentResetProperty => GetResourceString("CommentResetProperty", @"Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.");
        /// <summary>Functions ShouldSerialize&lt;PropertyName&gt; are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to n ...</summary>
        internal static string @CommentShouldSerialize => GetResourceString("CommentShouldSerialize", @"Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.");
        /// <summary>Private member variable to hold the ManagementScope which is used by the various methods.</summary>
        internal static string @CommentStaticManagementScope => GetResourceString("CommentStaticManagementScope", @"Private member variable to hold the ManagementScope which is used by the various methods.");
        /// <summary>Public static scope property which is used by the various methods.</summary>
        internal static string @CommentStaticScopeProperty => GetResourceString("CommentStaticScopeProperty", @"Public static scope property which is used by the various methods.");
        /// <summary>Property pointing to an embedded object to get System properties of the WMI object.</summary>
        internal static string @CommentSystemObject => GetResourceString("CommentSystemObject", @"Property pointing to an embedded object to get System properties of the WMI object.");
        /// <summary>Embedded class to represent WMI system Properties.</summary>
        internal static string @CommentSystemPropertiesClass => GetResourceString("CommentSystemPropertiesClass", @"Embedded class to represent WMI system Properties.");
        /// <summary>Time interval functions  ToTimeSpan and ToDmtfTimeInterval are added to the class to convert DMTF Time Interval to  System.TimeSpan and vice-versa.</summary>
        internal static string @CommentTimeSpanConvertionFunction => GetResourceString("CommentTimeSpanConvertionFunction", @"Time interval functions  ToTimeSpan and ToDmtfTimeInterval are added to the class to convert DMTF Time Interval to  System.TimeSpan and vice-versa.");
        /// <summary>Converts a given datetime in DMTF format to System.DateTime object.</summary>
        internal static string @CommentToDateTime => GetResourceString("CommentToDateTime", @"Converts a given datetime in DMTF format to System.DateTime object.");
        /// <summary>Converts a given System.DateTime object to DMTF datetime format.</summary>
        internal static string @CommentToDmtfDateTime => GetResourceString("CommentToDmtfDateTime", @"Converts a given System.DateTime object to DMTF datetime format.");
        /// <summary>Converts a given System.TimeSpan object to DMTF Time interval format.</summary>
        internal static string @CommentToDmtfTimeInterval => GetResourceString("CommentToDmtfTimeInterval", @"Converts a given System.TimeSpan object to DMTF Time interval format.");
        /// <summary>Converts a given time interval in DMTF format to System.TimeSpan object.</summary>
        internal static string @CommentToTimeSpan => GetResourceString("CommentToTimeSpan", @"Converts a given time interval in DMTF format to System.TimeSpan object.");
        /// <summary>If the embedded property is strongly typed then, to strongly type the property to the type of</summary>
        internal static string @EmbeddedComment => GetResourceString("EmbeddedComment", @"If the embedded property is strongly typed then, to strongly type the property to the type of");
        /// <summary>the embedded object, you have to do the following things.</summary>
        internal static string @EmbeddedComment2 => GetResourceString("EmbeddedComment2", @"the embedded object, you have to do the following things.");
        /// <summary>\t1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.</summary>
        internal static string @EmbeddedComment3 => GetResourceString("EmbeddedComment3", @"\t1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.");
        /// <summary>\t2. Include the namespace of the generated class.</summary>
        internal static string @EmbeddedComment4 => GetResourceString("EmbeddedComment4", @"\t2. Include the namespace of the generated class.");
        /// <summary>\t3. Change the property get/set functions so as return the instance of the Managed class.</summary>
        internal static string @EmbeddedComment5 => GetResourceString("EmbeddedComment5", @"\t3. Change the property get/set functions so as return the instance of the Managed class.");
        /// <summary>Below is a sample code.</summary>
        internal static string @EmbeddedComment6 => GetResourceString("EmbeddedComment6", @"Below is a sample code.");
        /// <summary>VB Code</summary>
        internal static string @EmbeddedComment7 => GetResourceString("EmbeddedComment7", @"VB Code");
        /// <summary>C# Code</summary>
        internal static string @EmbeddedComment8 => GetResourceString("EmbeddedComment8", @"C# Code");
        /// <summary>public &lt;ManagedClassName of Embedded property&gt; &lt;PropertyName&gt;</summary>
        internal static string @EmbeddedCSharpComment1 => GetResourceString("EmbeddedCSharpComment1", @"public <ManagedClassName of Embedded property> <PropertyName>");
        /// <summary>\t\tIf (AutoCommitProp == true &amp;&amp; isEmbedded == false)</summary>
        internal static string @EmbeddedCSharpComment10 => GetResourceString("EmbeddedCSharpComment10", @"\t\tIf (AutoCommitProp == true && isEmbedded == false)");
        /// <summary>\t\t{</summary>
        internal static string @EmbeddedCSharpComment11 => GetResourceString("EmbeddedCSharpComment11", @"\t\t{");
        /// <summary>\t\t\tPrivateLateBoundObject.Put();</summary>
        internal static string @EmbeddedCSharpComment12 => GetResourceString("EmbeddedCSharpComment12", @"\t\t\tPrivateLateBoundObject.Put();");
        /// <summary>\t\t}</summary>
        internal static string @EmbeddedCSharpComment13 => GetResourceString("EmbeddedCSharpComment13", @"\t\t}");
        /// <summary>\t}</summary>
        internal static string @EmbeddedCSharpComment14 => GetResourceString("EmbeddedCSharpComment14", @"\t}");
        /// <summary>}</summary>
        internal static string @EmbeddedCSharpComment15 => GetResourceString("EmbeddedCSharpComment15", @"}");
        /// <summary>{</summary>
        internal static string @EmbeddedCSharpComment2 => GetResourceString("EmbeddedCSharpComment2", @"{");
        /// <summary>\tget</summary>
        internal static string @EmbeddedCSharpComment3 => GetResourceString("EmbeddedCSharpComment3", @"\tget");
        /// <summary>\t{</summary>
        internal static string @EmbeddedCSharpComment4 => GetResourceString("EmbeddedCSharpComment4", @"\t{");
        /// <summary>\t\treturn new &lt;ManagedClassName of Embedded property&gt;((System.Management.ManagementBaseObject)(curObj["&lt;PropertyName&gt;"]));</summary>
        internal static string @EmbeddedCSharpComment5 => GetResourceString("EmbeddedCSharpComment5", @"\t\treturn new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj[""<PropertyName>""]));");
        /// <summary>\t}</summary>
        internal static string @EmbeddedCSharpComment6 => GetResourceString("EmbeddedCSharpComment6", @"\t}");
        /// <summary>\tset</summary>
        internal static string @EmbeddedCSharpComment7 => GetResourceString("EmbeddedCSharpComment7", @"\tset");
        /// <summary>\t{</summary>
        internal static string @EmbeddedCSharpComment8 => GetResourceString("EmbeddedCSharpComment8", @"\t{");
        /// <summary>\t\tcurObj["&lt;PropertyName&gt;"] = value.LateBoundObject;</summary>
        internal static string @EmbeddedCSharpComment9 => GetResourceString("EmbeddedCSharpComment9", @"\t\tcurObj[""<PropertyName>""] = value.LateBoundObject;");
        /// <summary>Public Property &lt;PropertyName&gt;() As &lt;ManagedClassName of Embedded property&gt;</summary>
        internal static string @EmbeddedVisualBasicComment1 => GetResourceString("EmbeddedVisualBasicComment1", @"Public Property <PropertyName>() As <ManagedClassName of Embedded property>");
        /// <summary>\tEnd Set</summary>
        internal static string @EmbeddedVisualBasicComment10 => GetResourceString("EmbeddedVisualBasicComment10", @"\tEnd Set");
        /// <summary>\tGet</summary>
        internal static string @EmbeddedVisualBasicComment2 => GetResourceString("EmbeddedVisualBasicComment2", @"\tGet");
        /// <summary>\t\tReturn New &lt;ManagedClassName of Embedded Property&gt;(CType(curObj("&lt;PropertyName&gt;"),System.Management.ManagementBaseObject))</summary>
        internal static string @EmbeddedVisualBasicComment3 => GetResourceString("EmbeddedVisualBasicComment3", @"\t\tReturn New <ManagedClassName of Embedded Property>(CType(curObj(""<PropertyName>""),System.Management.ManagementBaseObject))");
        /// <summary>\tEnd Get</summary>
        internal static string @EmbeddedVisualBasicComment4 => GetResourceString("EmbeddedVisualBasicComment4", @"\tEnd Get");
        /// <summary>\tSet(ByVal Value As &lt;ManagedClassName of Embedded property&gt;)</summary>
        internal static string @EmbeddedVisualBasicComment5 => GetResourceString("EmbeddedVisualBasicComment5", @"\tSet(ByVal Value As <ManagedClassName of Embedded property>)");
        /// <summary>\t\tcurObj("EObject")=Value.LateBoundObject</summary>
        internal static string @EmbeddedVisualBasicComment6 => GetResourceString("EmbeddedVisualBasicComment6", @"\t\tcurObj(""EObject"")=Value.LateBoundObject");
        /// <summary>\t\tIf (AutoCommitProp = True And isEmbedded = False) Then</summary>
        internal static string @EmbeddedVisualBasicComment7 => GetResourceString("EmbeddedVisualBasicComment7", @"\t\tIf (AutoCommitProp = True And isEmbedded = False) Then");
        /// <summary>\t\t\tPrivateLateBoundObject.Put()</summary>
        internal static string @EmbeddedVisualBasicComment8 => GetResourceString("EmbeddedVisualBasicComment8", @"\t\t\tPrivateLateBoundObject.Put()");
        /// <summary>\t\tEnd If</summary>
        internal static string @EmbeddedVisualBasicComment9 => GetResourceString("EmbeddedVisualBasicComment9", @"\t\tEnd If");
        /// <summary>FilePath cannot be empty.</summary>
        internal static string @EmptyFilePathException => GetResourceString("EmptyFilePathException", @"FilePath cannot be empty.");
        /// <summary>Namespace not initialized.</summary>
        internal static string @NamespaceNotInitializedException => GetResourceString("NamespaceNotInitializedException", @"Namespace not initialized.");
        /// <summary>FilePath or code generator object is null.</summary>
        internal static string @NullFilePathException => GetResourceString("NullFilePathException", @"FilePath or code generator object is null.");
        /// <summary>Unable to create code generator for '{0}'</summary>
        internal static string @UnableToCreateCodeGeneratorException => GetResourceString("UnableToCreateCodeGeneratorException", @"Unable to create code generator for '{0}'");
        /// <summary>System.Management currently is only supported for Windows desktop applications.</summary>
        internal static string @PlatformNotSupported_SystemManagement => GetResourceString("PlatformNotSupported_SystemManagement", @"System.Management currently is only supported for Windows desktop applications.");
        /// <summary>Could not find an installation of .NET Framework v4.0.30319. System.Management requires native modules from the .NET Framework to operate.</summary>
        internal static string @PlatformNotSupported_FullFrameworkRequired => GetResourceString("PlatformNotSupported_FullFrameworkRequired", @"Could not find an installation of .NET Framework v4.0.30319. System.Management requires native modules from the .NET Framework to operate.");
        /// <summary>Failed to load required native library '{0}'.</summary>
        internal static string @LoadLibraryFailed => GetResourceString("LoadLibraryFailed", @"Failed to load required native library '{0}'.");
        /// <summary>The native library '{0}' does not have all required functions. Please, update the .NET Framework.</summary>
        internal static string @PlatformNotSupported_FrameworkUpdatedRequired => GetResourceString("PlatformNotSupported_FrameworkUpdatedRequired", @"The native library '{0}' does not have all required functions. Please, update the .NET Framework.");
        /// <summary>The Query string supplied was invalid or improperly formed. Token `{0}` is expected</summary>
        internal static string @InvalidQueryTokenExpected => GetResourceString("InvalidQueryTokenExpected", @"The Query string supplied was invalid or improperly formed. Token `{0}` is expected");

    }
}